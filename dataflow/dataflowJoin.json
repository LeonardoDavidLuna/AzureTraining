{
	"name": "dataflowJoin",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "INAzureTableCustomers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "INAzureTableOrders",
						"type": "DatasetReference"
					},
					"name": "Orders"
				},
				{
					"dataset": {
						"referenceName": "INAzureTableProducts",
						"type": "DatasetReference"
					},
					"name": "Products"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OUTAzureTableFactSales",
						"type": "DatasetReference"
					},
					"name": "InsertSalesFact"
				}
			],
			"transformations": [
				{
					"name": "joinCustomerOrders"
				},
				{
					"name": "joinCustomerOrdersProducts"
				},
				{
					"name": "joinResults",
					"description": "Renaming joinCustomerOrdersProducts to select1 with columns 'OrderDate, CustomerName, CustomerEmail, CustomerID, LastName, ProductName, ProductCategory, Quantity, UnitPrice'"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          RegistrationDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Customers",
				"source(output(",
				"          OrderID as integer,",
				"          OrderDate as timestamp,",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          Quantity as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Orders",
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          UnitPrice as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Products",
				"Customers, Orders join(Customers@CustomerID == Orders@CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCustomerOrders",
				"joinCustomerOrders, Products join(Orders@ProductID == Products@ProductID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCustomerOrdersProducts",
				"joinCustomerOrdersProducts select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> joinResults",
				"joinResults derive(CustomerName = concat(FirstName,' ',LastName),",
				"          TotalSale = multiply(UnitPrice,Quantity)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SaleID as integer,",
				"          OrderDate as date,",
				"          CustomerName as string,",
				"          CustomerEmail as string,",
				"          ProductName as string,",
				"          ProductCategory as string,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(10,2),",
				"          TotalSale as decimal(18,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OrderDate,",
				"          CustomerName,",
				"          CustomerEmail = Email,",
				"          ProductName,",
				"          ProductCategory = Category,",
				"          Quantity,",
				"          UnitPrice,",
				"          TotalSale",
				"     )) ~> InsertSalesFact"
			]
		}
	}
}